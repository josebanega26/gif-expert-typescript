{"version":3,"sources":["components/Footer.tsx","components/AddCategory.tsx","utils/fetchGifs.ts","constants/api.js","components/CategoryItem.tsx","components/CategoriesList.tsx","hooks/useFetchGifs.ts","App.tsx","index.tsx"],"names":["Footer","year","Date","getFullYear","href","AddCategory","setCategories","useState","input","setInput","onSubmit","e","preventDefault","trim","length","oldCateogries","type","onChange","target","value","placeholder","id","fetchGifs","categoryTitle","a","fetch","res","json","data","gifList","map","title","images","img","downsized_medium","url","console","log","CategoryItem","item","className","src","alt","Categories","loading","setData","useEffect","then","useFetchGifs","categoryData","key","App","categories","category","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wOAgBeA,EAdA,WACb,IAAMC,GAAO,IAAIC,MAAOC,cACxB,OACE,qDACmB,uBAAGC,KAAK,mCAAR,eADnB,OAGGH,EAHH,UAIE,uBAAGG,KAAK,oDAAR,mC,OCwBSC,EA5BK,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,cAAsC,EACjCC,mBAAS,IADwB,mBACpDC,EADoD,KAC7CC,EAD6C,KAe3D,OACE,0BAAMC,SATW,SAACC,GAClBA,EAAEC,iBACEJ,EAAMK,OAAOC,OAAS,IAG1BR,GAAc,SAACS,GAAD,OAA2BP,GAA3B,mBAAqCO,OACnDN,EAAS,OAIP,2BACEO,KAAK,OACLC,SAjBc,SAACN,GACnBA,EAAEC,iBACFH,EAASE,EAAEO,OAAOC,QAgBdA,MAAOX,EACPY,YAAY,YACZC,GAAG,a,uBCxBEC,EAAS,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,+EAEHC,MAAM,GAAD,OCJzB,oFDIyB,OAAUF,GAAV,OCFL,wCDAG,cAEfG,EAFe,gBAGEA,EAAIC,OAHN,uBAGbC,EAHa,EAGbA,KACFC,EAAkBD,EAAKE,KAAI,gBAAGT,EAAH,EAAGA,GAAIU,EAAP,EAAOA,MAAOC,EAAd,EAAcA,OAAd,MAAiC,CAChEX,KACAU,QACAE,IAAG,OAAED,QAAF,IAAEA,OAAF,EAAEA,EAAQE,iBAAiBC,QAPX,kBASdN,GATc,wCAWrBO,QAAQC,IAAI,QAAZ,MAXqB,+DAAH,sDEYPC,G,YATM,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,KACtB,OACE,yBAAKC,UAAU,0BAA0BnB,GAAIkB,EAAKlB,IAChD,yBAAKoB,IAAKF,EAAKN,IAAKS,IAAKH,EAAKR,QAC9B,2BAAIQ,EAAKR,UCoBAY,EArBI,SAAC,GAAwC,IAAtCpB,EAAqC,EAArCA,cAAqC,ECF/B,SAACA,GAAuC,IAAD,EACzChB,mBAAqB,CAC3CqB,KAAM,GACNgB,SAAS,IAHsD,mBAC1DhB,EAD0D,KACpDiB,EADoD,KAejE,OATAC,qBAAU,WACRxB,EAAUC,GAAewB,MAAK,SAACnB,GAC7BiB,EAAQ,CACNjB,OACAgB,SAAS,SAGZ,CAACrB,IAEGK,EDZiCoB,CAAazB,GAAvC0B,EAD2C,EACjDrB,KAAoBgB,EAD6B,EAC7BA,QAI5B,OAHAR,QAAQC,IAAI,UAAWO,GACvBR,QAAQC,IAAIY,GAGV,oCACE,4BAAK1B,GACJqB,EACC,yCAEA,yBAAKJ,UAAU,6BACZS,EAAanB,KAAI,SAACS,GACjB,OAAO,kBAAC,EAAD,CAAcA,KAAMA,EAAMW,IAAKX,EAAKlB,WEAxC8B,EAjBH,WAAO,IAAD,EACoB5C,mBAAS,IAD7B,mBACT6C,EADS,KACG9C,EADH,KAGhB,OACE,oCACE,yBAAKkC,UAAU,aACb,0DACA,kBAAC,EAAD,CAAalC,cAAeA,IAC3B8C,EAAWtB,KAAI,SAACuB,GAAD,OACd,kBAAC,EAAD,CAAgB9B,cAAe8B,EAAUH,IAAKG,QAGlD,kBAAC,EAAD,QCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.4760fa1b.chunk.js","sourcesContent":["import React from 'react';\n\nconst Footer = () => {\n  const year = new Date().getFullYear();\n  return (\n    <footer>\n      Â© Made by &nbsp; <a href='https://josebanega.netlify.app/'>Jose Banega</a>\n      &nbsp;\n      {year} - &nbsp;\n      <a href='https://www.udemy.com/course/react-cero-experto/'>\n        Fernando Herrera React Course\n      </a>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React, { useState, ChangeEvent, FormEvent } from 'react';\n\ninterface AddCategoryProps {\n  setCategories: Function;\n}\nconst AddCategory = ({ setCategories }: AddCategoryProps) => {\n  const [input, setInput] = useState('');\n  const changeInput = (e: ChangeEvent<HTMLInputElement>) => {\n    e.preventDefault();\n    setInput(e.target.value);\n  };\n\n  const submitForm = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (input.trim().length < 1) {\n      return;\n    }\n    setCategories((oldCateogries: any[]) => [input, ...oldCateogries]);\n    setInput('');\n  };\n  return (\n    <form onSubmit={submitForm}>\n      <input\n        type='text'\n        onChange={changeInput}\n        value={input}\n        placeholder='search...'\n        id='search'\n      />\n    </form>\n  );\n};\n\nexport default AddCategory;\n","import { api, limits } from '../constants/api';\nimport { IGif } from '../interfaces/gifListInterface';\n\nexport const fetchGifs = async (categoryTitle: string) => {\n  try {\n    const res = await fetch(`${api}${categoryTitle}${limits}`);\n    const { data } = await res.json();\n    const gifList: IGif[] = data.map(({ id, title, images }: any) => ({\n      id,\n      title,\n      img: images?.downsized_medium.url,\n    }));\n    return gifList;\n  } catch (error) {\n    console.log('error', error);\n    throw error;\n  }\n};\n","export const api =\n  'https://api.giphy.com/v1/gifs/search?api_key=lOAKbPYJSGqdnkHucWLDfGBSOk6rHVg7&q=';\n\nexport const limits = '&limit=12&offset=0&rating=g&lang=en';\n","import React from 'react';\nimport { IGif } from '../interfaces/gifListInterface';\nimport './CategoryItem.css';\ninterface CategoryItemProps {\n  item: IGif;\n}\nconst CategoryItem = ({ item }: CategoryItemProps) => {\n  return (\n    <div className='categoryItem--container' id={item.id}>\n      <img src={item.img} alt={item.title} />\n      <p>{item.title}</p>\n    </div>\n  );\n};\n\nexport default CategoryItem;\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { IGif } from '../interfaces/gifListInterface';\nimport './CategoriesList.css';\nimport CategoryItem from './CategoryItem';\ninterface CategoriesProps {\n  categoryTitle: string;\n}\n\nconst Categories = ({ categoryTitle }: CategoriesProps) => {\n  const { data: categoryData, loading } = useFetchGifs(categoryTitle);\n  console.log('loading', loading);\n  console.log(categoryData);\n\n  return (\n    <>\n      <h2>{categoryTitle}</h2>\n      {loading ? (\n        <p>loading...</p>\n      ) : (\n        <div className='categoriesList--container'>\n          {categoryData.map((item: IGif) => {\n            return <CategoryItem item={item} key={item.id}></CategoryItem>;\n          })}\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Categories;\n","import { useEffect, useState } from 'react';\nimport { fetchGifs } from '../utils/fetchGifs';\n\ninterface IFetchHook {\n  data: any;\n  loading: boolean;\n}\nexport const useFetchGifs = (categoryTitle: string): IFetchHook => {\n  const [data, setData] = useState<IFetchHook>({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    fetchGifs(categoryTitle).then((data) => {\n      setData({\n        data,\n        loading: false,\n      });\n    });\n  }, [categoryTitle]);\n\n  return data;\n};\n","import React, { useState } from 'react';\nimport Footer from './components/Footer';\nimport AddCategory from './components/AddCategory';\nimport CategoriesList from './components/CategoriesList';\n\nconst App = () => {\n  const [categories, setCategories] = useState([]);\n\n  return (\n    <>\n      <div className='container'>\n        <h2>Gif-Expert with typescript</h2>\n        <AddCategory setCategories={setCategories}></AddCategory>\n        {categories.map((category) => (\n          <CategoriesList categoryTitle={category} key={category} />\n        ))}\n      </div>\n      <Footer></Footer>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}